

<!-- DUMP the whole @all_users -->
<div>
  <h1>All Users</h1>
  <ul>
    <% @all_users.each do |user| %>
      <li><%= user.email_address %></li>
    <% end %>
  </ul>
</div>
<div id="<%= dom_id board %>" class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 py-4 sm:py-8">
  <div class="max-w-[1800px] mx-auto px-3 sm:px-6 lg:px-8">
    <%# Board Header %>
    <div class="mb-4 sm:mb-8">
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 sm:gap-4">
        <div>
          <h1 class="text-xl sm:text-3xl font-bold text-gray-900"><%= @board.title %></h1>
          <p class="mt-1 text-xs sm:text-sm text-gray-500"><%= @board.description %></p>
        </div>
        
        <div class="flex flex-wrap items-center gap-2 sm:gap-3">
          <div data-controller="modal">
            <button type="button" 
                    class="inline-flex items-center px-3 sm:px-4 py-1.5 sm:py-2 bg-indigo-600 text-white text-xs sm:text-sm font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors"
                    data-action="click->modal#show">
              <i class="fas fa-plus mr-1 sm:mr-2"></i> New Column
            </button>
           <div data-modal-target="container" class="fixed inset-0 z-50 hidden">
  <div class="fixed inset-0 bg-black/30 backdrop-blur-sm transition-opacity"></div>
  
  <div class="fixed inset-0 z-10 overflow-y-auto">
    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
      <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
        <div class="absolute right-0 top-0 hidden pr-4 pt-4 sm:block">
          <button type="button" class="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" data-action="click->modal#close">
            <span class="sr-only">Close</span>
            <i class="fas fa-times"></i>
          </button>
        </div>
        
        <div class="sm:flex sm:items-start">
          <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
            <h3 class="text-lg font-semibold leading-6 text-gray-900" id="modal-title">New Column</h3>
            <div class="mt-4">
              <%= render "columns/form", column: Column.new(board: @board) %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div> 
          </div>
          
          <div class="flex items-center gap-2">
            <div data-controller="modal">
              <button type="button" 
                      class="inline-flex items-center px-2 sm:px-3 py-1.5 sm:py-2 border border-gray-300 shadow-sm text-xs sm:text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors"
                      data-action="click->modal#show">
                <i class="fas fa-edit mr-1"></i> Edit Board
              </button>
              <div data-modal-target="container" class="fixed inset-0 z-50 hidden">
                <div class="fixed inset-0 bg-black/30 backdrop-blur-sm transition-opacity"></div>
                
                <div class="fixed inset-0 z-10 overflow-y-auto">
                  <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                    <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                      <div class="absolute right-0 top-0 hidden pr-4 pt-4 sm:block">
                        <button type="button" class="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" data-action="click->modal#close">
                          <span class="sr-only">Close</span>
                          <i class="fas fa-times"></i>
                        </button>
                      </div>
                      
                      <div class="sm:flex sm:items-start">
                        <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                          <h3 class="text-lg font-semibold leading-6 text-gray-900" id="modal-title">Edit Board</h3>
                          <div class="mt-4">
                            <%= form_with(model: board, class: "contents") do |form| %>
                              <% if board.errors.any? %>
                                <div id="error_explanation" class="bg-red-50 text-red-500 px-3 py-2 font-medium rounded-md mt-3">
                                  <h2><%= pluralize(board.errors.count, "error") %> prohibited this board from being saved:</h2>

                                  <ul class="list-disc ml-6">
                                    <% board.errors.each do |error| %>
                                      <li><%= error.full_message %></li>
                                    <% end %>
                                  </ul>
                                </div>
                              <% end %>

                              <div class="my-5">
                                <%= form.label :title %>
                                <%= form.text_field :title,
                                placeholder: "Enter board title",
                                required: true,
                                minlength: 1,
                                maxlength: 50,
                                class: ["block shadow-sm rounded-md border px-3 py-2 mt-2 w-full", {"border-gray-400 focus:outline-blue-600": board.errors[:title].none?, "border-red-400 focus:outline-red-600": board.errors[:title].any?}] %>
                              </div>

                              <div class="my-5">
                                <%= form.label :description %>
                                <%= form.text_field :description, class: ["block shadow-sm rounded-md border px-3 py-2 mt-2 w-full", {"border-gray-400 focus:outline-blue-600": board.errors[:description].none?, "border-red-400 focus:outline-red-600": board.errors[:description].any?}] %>
                              </div>

                              <div class="inline">
                                <%= form.submit class: "w-full sm:w-auto rounded-md px-3.5 py-2.5 bg-blue-600 hover:bg-blue-500 text-white inline-block font-medium cursor-pointer" %>
                              </div>
                            <% end %>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <%= button_to @board, method: :delete, 
                class: "inline-flex items-center px-2 sm:px-3 py-1.5 sm:py-2 border border-red-300 shadow-sm text-xs sm:text-sm font-medium rounded-md text-red-700 bg-white hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors",
                data: { turbo_confirm: "Are you sure? This action cannot be undone." } do %>
              <i class="fas fa-trash mr-1"></i> Delete Board
            <% end %>
          </div>
        </div>
      </div>
    </div>

    <%# Kanban Board %>
    <div class="flex gap-3 sm:gap-6 overflow-x-auto pb-4 sm:pb-8 min-h-[calc(100vh-8rem)] sm:min-h-[calc(100vh-12rem)]">
      <% board.columns.each do |column| %>
        <div class="flex-shrink-0 w-64 sm:w-80 bg-gray-50 rounded-lg shadow-sm border border-gray-200"
             ondrop="dropHandler(event)" 
             ondragover="dragoverHandler(event)"
             data-column-id="<%= column.id %>">
          <%# Column Header %>
          <div class="p-3 sm:p-4 bg-white rounded-t-lg border-b border-gray-200">
            <div class="flex items-center justify-between group">
              <div class="flex items-center gap-2">
                <h2 class="text-xs sm:text-sm font-semibold text-gray-900"><%= column.name %></h2>
                <div data-controller="modal">
                  <button type="button" 
                          class="text-gray-400 hover:text-green-600 transition-colors"
                          title="Add card"
                          data-action="click->modal#show">
                    <i class="fas fa-plus"></i>
                  </button>
                  <div data-modal-target="container" class="fixed inset-0 z-50 hidden">
                    <div class="fixed inset-0 bg-black/30 backdrop-blur-sm transition-opacity"></div>
                    
                    <div class="fixed inset-0 z-10 overflow-y-auto">
                      <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                        <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                          <div class="absolute right-0 top-0 hidden pr-4 pt-4 sm:block">
                            <button type="button" class="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" data-action="click->modal#close">
                              <span class="sr-only">Close</span>
                              <i class="fas fa-times"></i>
                            </button>
                          </div>
                          
                          <div class="sm:flex sm:items-start">
                            <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                              <h3 class="text-lg font-semibold leading-6 text-gray-900" id="modal-title">New Card</h3>
                              <div class="mt-4">
                                <%= render "cards/form", card: Card.new(column: column), all_users: @all_users %>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                <div data-controller="modal">
                  <button type="button" 
                          class="text-gray-400 hover:text-blue-600 transition-colors"
                          title: "Edit column"
                          data-action="click->modal#show">
                    <i class="fas fa-edit"></i>
                  </button>
                  <div data-modal-target="container" class="fixed inset-0 z-50 hidden">
                    <div class="fixed inset-0 bg-black/30 backdrop-blur-sm transition-opacity"></div>
                    
                    <div class="fixed inset-0 z-10 overflow-y-auto">
                      <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                        <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                          <div class="absolute right-0 top-0 hidden pr-4 pt-4 sm:block">
                            <button type="button" class="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" data-action="click->modal#close">
                              <span class="sr-only">Close</span>
                              <i class="fas fa-times"></i>
                            </button>
                          </div>
                          
                          <div class="sm:flex sm:items-start">
                            <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                              <h3 class="text-lg font-semibold leading-6 text-gray-900" id="modal-title">Edit Column</h3>
                              <div class="mt-4">
                                <%= render "columns/form", column: column %>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <%= button_to board_column_path(board, column), 
                    method: :delete,
                    class: "text-gray-400 hover:text-red-600 transition-colors",
                    title: "Delete column" do %>
                  <i class="fas fa-trash"></i>
                <% end %>
              </div>
            </div>
          </div>

          <%# Cards Container %>
          <div class="p-3 sm:p-4 space-y-2 sm:space-y-3" data-cards-container>
            <% column.cards.each do |card| %>
              <%# Drop Zone Above Card %>
              <div class="h-2 rounded-md transition-all duration-200" data-drop-zone></div>
              
              <div class="
              cursor-grab
              group relative bg-white rounded-lg shadow-sm border-l-4 hover:shadow-md transition-shadow duration-200 <%= priority_border_color_class(card.priority) if card.priority.present? %>"
                   draggable="true"
                   id="<%= dom_id(card) %>"
                   ondragstart="dragstartHandler(event)"
                   data-card-id="<%= card.id %>">
                <%# Card Content %>
                <div class="p-3 sm:p-4">
                  <div class="flex items-start justify-between">
                    <div class="flex items-center gap-2">
                      <span class="inline-flex items-center rounded text-xs font-medium <%= priority_color_class(card.priority) %>">
                        <%= card.priority.humanize %>
                      </span>
                      <h3 class="text-xs sm:text-sm font-medium text-gray-900"><%= card.name %></h3>
                    </div>
                    <div class="flex items-center gap-2">
                      <div data-controller="modal">
                        <button type="button" 
                                class="text-gray-400 hover:text-blue-600 transition-colors"
                                title="Edit card"
                                data-action="click->modal#show">
                          <i class="fas fa-edit"></i>
                        </button>
                        <div data-modal-target="container" class="fixed inset-0 z-50 hidden">
                          <div class="fixed inset-0 bg-black/30 backdrop-blur-sm transition-opacity"></div>
                          
                          <div class="fixed inset-0 z-10 overflow-y-auto">
                            <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
                              <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
                                <div class="absolute right-0 top-0 hidden pr-4 pt-4 sm:block">
                                  <button type="button" class="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" data-action="click->modal#close">
                                    <span class="sr-only">Close</span>
                                    <i class="fas fa-times"></i>
                                  </button>
                                </div>
                                
                                <div class="sm:flex sm:items-start">
                                  <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                                    <h3 class="text-lg font-semibold leading-6 text-gray-900" id="modal-title">Edit Card</h3>
                                    <div class="mt-4">
                                    <!-- pass all users to the form -->
                                      <%= render "cards/form", card: card, all_users: @all_users %>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>

                      <%= button_to board_column_card_path(board, column, card),
                          method: :delete,
                          class: "text-gray-400 hover:text-red-600 transition-colors",
                          title: "Delete card",
                          data: { turbo_confirm: "Are you sure you want to delete this card?" } do %>
                        <i class="fas fa-trash"></i>
                      <% end %>
                    </div>
                  </div>

                  <% if card.description.present? %>
                    <p class="mt-2 text-xs sm:text-sm text-gray-600"><%= card.description %></p>
                  <% end %>

                  <div class="flex items-center justify-between mt-2 sm:mt-3">
                    <div class="flex items-center text-xs text-gray-400">
                      <i class="fas fa-clock mr-1"></i>
                      <%= card.created_at.strftime("%b %d, %Y") %>
                    </div>
                    <img src="https://api.dicebear.com/7.x/avataaars/svg?seed=<%= card.assignee.email_address if card.assignee.present? %>" 
                         alt="Avatar" 
                         class="h-6 w-6 sm:h-8 sm:w-8 rounded-full bg-gray-100" />
                  </div>
                </div>
              </div>
            <% end %>
            
            <%# Final Drop Zone %>
            <div class="h-2 rounded-md transition-all duration-200" data-drop-zone></div>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
async function updateCardPositions(colId, cardOrder) {

  const boardId = window.location.pathname.split('/')[2];
 
  const url = `/update_card_positions`;
  const response = await fetch(url, {
      // add securit token that rails needs
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      method: 'POST',
      body: JSON.stringify({ 
          board_id: boardId,
          column_id: colId,
          card_order: cardOrder })
    });
    }
function resetAllDropZones() {
  // Remove all existing drop zones
  document.querySelectorAll('[data-drop-zone]').forEach(zone => {
    zone.remove();
  });
  
  // Recreate drop zones in their correct positions
  document.querySelectorAll('[data-cards-container]').forEach(container => {
    const cards = container.querySelectorAll('[data-card-id]');
    cards.forEach(card => {
      const dropZone = document.createElement('div');
      dropZone.className = 'h-2 rounded-md transition-all duration-200';
      dropZone.setAttribute('data-drop-zone', '');
      card.before(dropZone);
    });
    
    // Add final drop zone at the end
    const finalDropZone = document.createElement('div');
    finalDropZone.className = 'h-2 rounded-md transition-all duration-200';
    finalDropZone.setAttribute('data-drop-zone', '');
    container.appendChild(finalDropZone);
  });
}

function dragstartHandler(event) {
  // Reset everything before starting new drag
  resetAllDropZones();
  
  event.dataTransfer.setData("text/plain", event.target.id);
  

  
  // Show all drop zones immediately when dragging starts
  document.querySelectorAll('[data-drop-zone]').forEach(zone => {
    zone.classList.add('h-12', 'bg-indigo-50', 'border-2', 'border-dashed', 'border-indigo-200');
  });
  
  // Hide the drop zones adjacent to the dragged card
  const sourceCard = event.target;
  const dropZones = sourceCard.parentElement.querySelectorAll('[data-drop-zone]');
  dropZones.forEach(zone => {
    if (zone.nextElementSibling === sourceCard || zone.previousElementSibling === sourceCard) {
      zone.style.display = 'none';
    }
  });
}

function dragoverHandler(event) {
  event.preventDefault();
  
  const dropZone = event.target.closest('[data-drop-zone]');
  const column = event.target.closest('[data-column-id]');
  
  // Reset all drop zones to base state
  document.querySelectorAll('[data-drop-zone]').forEach(zone => {
    zone.classList.remove('bg-indigo-100');
    zone.classList.add('bg-indigo-50');
  });
  
  // Highlight current drop zone
  if (dropZone) {
    dropZone.classList.remove('bg-indigo-50');
    dropZone.classList.add('bg-indigo-100');
  } else if (column) {
    // If hovering over column, show a drop zone at the top
    const cardsContainer = column.querySelector('[data-cards-container]');
    if (cardsContainer) {
      const firstDropZone = cardsContainer.querySelector('[data-drop-zone]');
      if (firstDropZone) {
        firstDropZone.classList.remove('bg-indigo-50');
        firstDropZone.classList.add('bg-indigo-100');
      }
    }
  }
}

function dragendHandler(event) {
  // Remove the opacity class from the dragged card
  event.target.classList.remove('opacity-50');
  
  // Reset all visual states
  resetAllDropZones();
}

// Move this function outside dropHandler
function getListOfCardsInColumn(columnId) {
  const column = document.querySelector(`[data-column-id="${columnId}"]`);
  if (!column) return [];
  
  const cardsContainer = column.querySelector('[data-cards-container]');
  const cards = Array.from(cardsContainer.querySelectorAll('[data-card-id]'));
  const newCardOrder = cards.map(card => card.getAttribute('data-card-id'));
  const newCardOrderWithPosition = newCardOrder.map((cardId, index) => ({
    cardId,
    position: index
  }));
  return newCardOrderWithPosition;
}

function dropHandler(event) {
  event.preventDefault();
  
  const cardId = event.dataTransfer.getData("text/plain");
  const card = document.getElementById(cardId);
  const dropZone = event.target.closest('[data-drop-zone]');
  const targetColumn = event.target.closest('[data-column-id]');
  
  if (!card) return;
  
  if (dropZone) {
    // Insert after the drop zone
    dropZone.after(card);
    // Get the column after dropping in drop zone
    const newColumn = dropZone.closest('[data-column-id]');
    const colId = newColumn.getAttribute('data-column-id');
    const cardOrder = getListOfCardsInColumn(colId);
    updateCardPositions(colId, cardOrder);
  } else if (targetColumn) {
    // If dropped directly on column, insert at the top
    const cardsContainer = targetColumn.querySelector('[data-cards-container]');
    if (cardsContainer) {
      const firstDropZone = cardsContainer.querySelector('[data-drop-zone]');
      if (firstDropZone) {
        firstDropZone.after(card);
      } else {
        cardsContainer.appendChild(card);
      }
      const colId = targetColumn.getAttribute('data-column-id');
      const cardOrder = getListOfCardsInColumn(colId);
      updateCardPositions(colId, cardOrder);
    }
  }
  
  // Reset all drop zones after dropping
  resetAllDropZones();
}

// Initialize drop zones when the page loads
document.addEventListener('DOMContentLoaded', function() {
  resetAllDropZones();
  
  document.querySelectorAll('[draggable="true"]').forEach(card => {
    card.addEventListener('dragend', dragendHandler);
  });
  
  document.querySelectorAll('[data-drop-zone]').forEach(zone => {
    zone.addEventListener('dragover', dragoverHandler);
    zone.addEventListener('drop', dropHandler);
  });
  
  // Add column drop zones
  document.querySelectorAll('[data-column-id]').forEach(column => {
    column.addEventListener('dragover', dragoverHandler);
    column.addEventListener('drop', dropHandler);
  });
});



</script>